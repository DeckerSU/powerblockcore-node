#!/bin/bash

set -e
: ${LTC_URL="https://github.com/litecoin-project/litecore-litecoin/releases/download"}
: ${LTC_VERSION="0.13.2"}
: ${LTC_TAG="v0.13.2.1-litecore-rc2"}
: ${LTC_PLATFORM=""}
: ${LTC_ARCH=""}
: ${LTC_TARBALL=""}

root_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
[[ -n "$LTC_PLATFORM" ]] && platform="$LTC_PLATFORM" || platform=`uname -a | awk '{print tolower($1)}'`
[[ -n "$LTC_ARCH" ]] && arch="$LTC_ARCH" || arch=`uname -m`
version="$LTC_VERSION"
url="$LTC_URL"
tag="$LTC_TAG"

if [[ -z "$LTC_TARBALL" ]]; then
    if [ "${platform}" == "linux" ]; then
        if [ "${arch}" == "x86_64" ]; then
            tarball_name="litecoin-${version}-x86_64-linux-gnu.tar.gz"
        elif [ "${arch}" == "x86_32" ]; then
            tarball_name="litecoin-${version}-i686-pc-linux-gnu.tar.gz"
        fi
    elif [ "${platform}" == "darwin" ]; then
        tarball_name="litecoin-${version}-osx64.tar.gz"
    else
        echo "Litecoin binary distribution not available for platform and architecture"
        exit 5
    fi
else
    tarball_name="$LTC_TARBALL"
fi

: ${binary_url="${url}/${tag}/${tarball_name}"}
: ${shasums_url="${url}/${tag}/SHA256SUMS.asc"}

: ${LTC_VERIFY="0"}
: ${VERIFY_BITCOIN_DOWNLOAD="$LTC_VERIFY"}
: ${SKIP_BITCOIN_DOWNLOAD="0"}

download_bitcoind() {

    cd "${root_dir}/bin"

    echo "Downloading litecoin: ${binary_url}"

    is_curl=1
    if hash curl 2>/dev/null; then
        curl --fail -I "$binary_url" >/dev/null 2>&1
    else
        is_curl=0
        wget --server-response --spider "$binary_url" >/dev/null 2>&1
    fi

    if test $? -eq 0; then
        if (( is_curl )); then
            curl -L "$binary_url" > "$tarball_name"
            (( VERIFY_BITCOIN_DOWNLOAD )) && curl -L "$shasums_url" > SHA256SUMS.asc || true
        else
            wget $binary_url
            (( VERIFY_BITCOIN_DOWNLOAD )) && wget $shasums_url || true
        fi
        if test -e "${tarball_name}"; then
            echo "Unpacking litecoin distribution"
            tar -xvzf $tarball_name
            if test $? -eq 0; then
                ln -sf "litecoin-${version}/bin/litecoind"
                return;
            fi
        fi
    fi
    echo "Litecoin binary distribution could not be downloaded"
    exit 2
}

verify_download() {
    echo "Verifying signatures of litecoin download"
    gpg --verify "${root_dir}/bin/SHA256SUMS.asc"

    if hash shasum 2>/dev/null; then
        shasum_cmd="shasum -a 256"
    else
        shasum_cmd="sha256sum"
    fi

    download_sha=$(${shasum_cmd} "${root_dir}/bin/${tarball_name}" | awk '{print $1}')
    expected_sha=$(cat "${root_dir}/bin/SHA256SUMS.asc" | grep "${tarball_name}" | awk '{print $1}')
    echo "Checksum (download): ${download_sha}"
    echo "Checksum (verified): ${expected_sha}"
    if [ "${download_sha}" != "${expected_sha}" ]; then
        echo -e "\033[1;31mChecksums did NOT match!\033[0m\n"
        exit 1
    else
        echo -e "\033[1;32mChecksums matched!\033[0m\n"
    fi
}

(( SKIP_BITCOIN_DOWNLOAD )) && download=0 || download=1
(( VERIFY_BITCOIN_DOWNLOAD )) && verify=1 || verify=0


while [ -n "$1" ]; do
  param="$1"
  value="$2"

  case $param in
    --skip-bitcoin-download)
          download=0
          ;;
    --verify-bitcoin-download)
          verify=1
          ;;
  esac
  shift
done

if (( download )); then
    download_bitcoind
else
    >&2 echo -e "\n [!!!] Not downloading litecoind, as \$download is 0\n"
fi

if (( verify )); then
    verify_download
else
    >&2 echo -e "\n [!!!] Not verifying litecoind, as \$verify is 0\n"
fi

exit 0
